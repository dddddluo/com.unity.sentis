{
  "name": "com.unity.sentis",
  "displayName": "Sentis",
  "version": "1.3.0-pre.3",
  "unity": "2023.2",
  "description": "The Sentis package is a neural network inference library for Unity. You can use Sentis to import trained neural network models into Unity, then run them in real time locally on any platform Unity supports and in the Editor. You can run models on the GPU or the CPU.\n\nYou can use Sentis to run models that do style transfer, generate assets, automate non-player character (NPC) logic, and much more\n\nVisit https://discussions.unity.com/c/10 for updates and resources on Sentis, including a full sample project.",
  "dependencies": {
    "com.unity.burst": "1.8.10",
    "com.unity.modules.jsonserialize": "1.0.0",
    "com.unity.modules.imageconversion": "1.0.0"
  },
  "_upm": {
    "changelog": "### Added\n- LoadModelDesc method in ModelLoader now public\n- TensorInt data type for Clip\n- Docs page for exporting models to ONNX format\n- Model sources in documentation\n- Editor menu with links to documentation and project submission form\n\n### Changed\n- clearOnInit default to false in tensor data pinning\n- NonZero asserts on command buffer as unsupported\n- Improved inspector for custom layers and allow horizontal scrolling\n- Rewrote docs and sample code for model execution in parts\n- Package description with links to project submission and email\n\n### Fixed\n- Thread group count for Split\n- Importer no longer fails when inspector is out of focus\n- Docstrings for accuracy\n- Broken links in documentation to onnx model zoo\n- Dense import step with transpose\n- Warnings for async methods in tensor data classes\n- Resize opset 10 imports with correct settings\n\n### Removed\n- Broken Dense to ScaleBias optimization"
  },
  "upmCi": {
    "footprint": "e660cfde96e21fb8b160e24b79522810c4f66943"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.sentis@1.3/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/UnityInferenceEngine.git",
    "type": "git",
    "revision": "e3865fddb75d9300ac7f264b2c0cb95b06b844a1"
  },
  "samples": [
    {
      "displayName": "Add a custom layer",
      "description": "An example of adding a custom layer to implement a custom ONNX operator.",
      "path": "Samples~/Add a custom layer"
    },
    {
      "displayName": "Check the metadata of a model",
      "description": "An example of checking the metadata of a model.",
      "path": "Samples~/Check the metadata of a model"
    },
    {
      "displayName": "Convert tensors to textures",
      "description": "Examples of converting tensors to textures.",
      "path": "Samples~/Convert tensors to textures"
    },
    {
      "displayName": "Convert textures to tensors",
      "description": "Examples of converting textures to textures.",
      "path": "Samples~/Convert textures to tensors"
    },
    {
      "displayName": "Copy a texture tensor to the screen",
      "description": "An example of using TextureConverter.RenderToScreen to copy a texture tensor to the screen.",
      "path": "Samples~/Copy a texture tensor to the screen"
    },
    {
      "displayName": "Do an operation on a tensor",
      "description": "An example of using Ops to do an operation on a tensor.",
      "path": "Samples~/Do an operation on a tensor"
    },
    {
      "displayName": "Encrypt a model",
      "description": "Example of serializing an encrypted model to disk using a custom editor window and loading that encrypted model at runtime.",
      "path": "Samples~/Encrypt a model"
    },
    {
      "displayName": "Read output asynchronously",
      "description": "Examples of reading the output from a model asynchronously, using compute shaders or Burst.",
      "path": "Samples~/Read output asynchronously"
    },
    {
      "displayName": "Run a model",
      "description": "Examples of running models with different numbers of inputs and outputs.",
      "path": "Samples~/Run a model"
    },
    {
      "displayName": "Run a model a layer at a time",
      "description": "An example of using StartManualSchedule to run a model a layer a time.",
      "path": "Samples~/Run a model a layer at a time"
    },
    {
      "displayName": "Use Burst to write data",
      "description": "An example of using Burst to write data to a tensor in the Job system.",
      "path": "Samples~/Use Burst to write data"
    },
    {
      "displayName": "Use a compute buffer",
      "description": "An example of using a compute shader to write data to a tensor on the GPU.",
      "path": "Samples~/Use a compute buffer"
    },
    {
      "displayName": "Use tensor indexing methods",
      "description": "Examples of using tensor indexing methods to get and set tensor values.",
      "path": "Samples~/Use tensor indexing methods"
    }
  ]
}
