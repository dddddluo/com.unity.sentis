{
  "name": "com.unity.sentis",
  "displayName": "Sentis",
  "version": "1.1.1-exp.2",
  "unity": "2021.3",
  "description": "The Sentis package is a neural network inference library for Unity. You can use Sentis to import trained neural network models into Unity, then run them in real time locally on any platform Unity supports and in the Editor. You can run models on the GPU or the CPU.\n\nYou can use Sentis to run models that do style transfer, generate assets, automate non-player character (NPC) logic, and much more\n\nVisit https://discussions.unity.com/c/10 for updates and resources on the Sentis beta, including a full sample project.",
  "dependencies": {
    "com.unity.burst": "1.8.4",
    "com.unity.modules.jsonserialize": "1.0.0",
    "com.unity.modules.imageconversion": "1.0.0"
  },
  "samples": [
    {
      "displayName": "Add a custom layer",
      "description": "An example of adding a custom layer to implement a custom ONNX operator.",
      "path": "Samples~/Projects/CustomLayer"
    },
    {
      "displayName": "Check the metadata of a model",
      "description": "An example of checking the metadata of a model.",
      "path": "Samples~/Projects/ModelMetadata"
    },
    {
      "displayName": "Convert tensors to textures",
      "description": "Examples of converting tensors to textures.",
      "path": "Samples~/Projects/TensorToTexture"
    },
    {
      "displayName": "Convert textures to tensors",
      "description": "Examples of converting textures to textures.",
      "path": "Samples~/Projects/TextureToTensor"
    },
    {
      "displayName": "Copy a texture tensor to the screen",
      "description": "An example of using TextureConverter.RenderToScreen to copy a texture tensor to the screen.",
      "path": "Samples~/Projects/RunModelOnFullScreen"
    },
    {
      "displayName": "Do an operation on a tensor",
      "description": "An example of using Ops to do an operation on a tensor.",
      "path": "Samples~/Projects/ExecuteOperatorOnTensor"
    },
    {
      "displayName": "Read output asynchronously",
      "description": "Examples of reading the output from a model asynchronously, using compute shaders or Burst.",
      "path": "Samples~/Projects/AsyncReadback"
    },
    {
      "displayName": "Run a model a layer at a time",
      "description": "An example of using StartManualSchedule to run a model a layer a time.",
      "path": "Samples~/Projects/ModelExecutionInParts"
    },
    {
      "displayName": "Run a model",
      "description": "Examples of running models with different numbers of inputs and outputs.",
      "path": "Samples~/Projects/ModelExecution"
    },
    {
      "displayName": "Use a compute buffer",
      "description": "An example of using a compute shader to write data to a tensor on the GPU.",
      "path": "Samples~/Projects/ComputeBuffer"
    },
    {
      "displayName": "Use Burst to write data",
      "description": "An example of using Burst to write data to a tensor in the Job system.",
      "path": "Samples~/Projects/CSharpJob"
    },
    {
      "displayName": "Use tensor indexing methods",
      "description": "Examples of using tensor indexing methods to get and set tensor values. ",
      "path": "Samples~/Projects/TensorIndexing"
    }
  ],
  "_upm": {
    "changelog": "### Fixed\n- Fixed inference with multiple Conv layers with different attributes in same model\n- Fixed inference for AveragePool and MaxPool with large channel counts on GPUPixel\n- Fixed batched MatMul inference on GPUCompute and GPUCommandBuffer\n- Fixed Conv inference with no bias on GPUCompute and GPUCommandBuffer\n- Fixed inspector view when model can't be loaded\n- Made Mode.Load(FileStream) added"
  },
  "upmCi": {
    "footprint": "59db4e298a5f971102dbe534aa6470e70b7c9fe3"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.sentis@1.1/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/UnityInferenceEngine.git",
    "type": "git",
    "revision": "a15a29371756a97c1fc4d1229e416623e86bddd7"
  }
}
